package bencode

import (
	"bytes"
	"testing"
)

func TestDecodeStruct(t *testing.T) {
	// example of http://www.bittorrent.org/beps/bep_0005.html
	str := []byte("d1:ad2:id20:abcdefghij0123456789e1:q4:ping1:t2:aa1:y1:qe")
	var obj struct {
		T string `bencode:"t"`
		Y string `bencode:"y"`
		Q string `bencode:"q"`
		A struct {
			ID [20]byte `bencode:"id"`
		} `bencode:"a"`
	}
	err := Decode(str, &obj)
	if err != nil {
		t.Fatalf("FATAL: decode struct: %v", err)
	}
	if obj.T != "aa" {
		t.Fatalf("unexpected value of t: %s", obj.T)
	}
	if obj.Y != "q" {
		t.Fatalf("unexpected value of y: %s", obj.Y)
	}
	if obj.Q != "ping" {
		t.Fatalf("unexpected value of q: %s", obj.Q)
	}
	if bytes.Compare(obj.A.ID[:], []byte("abcdefghij0123456789")) != 0 {
		t.Fatalf("unexpected value of a.id: %s", string(obj.A.ID[:]))
	}
}

func TestDecodeInherit(t *testing.T) {
	type hdr struct {
		Transaction string `bencode:"t"`
		Type        string `bencode:"y"`
	}
	type pingResponse struct {
		hdr
		Response struct {
			ID [20]byte `bencode:"id"`
		} `bencode:"r"`
	}
	var r pingResponse
	data := []byte{
		0x64, 0x32, 0x3a, 0x69, 0x70, 0x36, 0x3a, 0x74, 0x55, 0x1d, 0xa7, 0xd3, 0x73, 0x31, 0x3a, 0x72,
		0x64, 0x32, 0x3a, 0x69, 0x64, 0x32, 0x30, 0x3a, 0xf7, 0x45, 0xed, 0xe5, 0x01, 0x34, 0x7f, 0x9a,
		0x4b, 0x11, 0x3b, 0xe3, 0xc6, 0x36, 0xb5, 0x97, 0xd8, 0x49, 0xe7, 0x6c, 0x31, 0x3a, 0x70, 0x69,
		0x35, 0x34, 0x31, 0x33, 0x31, 0x65, 0x65, 0x31, 0x3a, 0x74, 0x33, 0x32, 0x3a, 0x32, 0x31, 0x30,
		0x31, 0x31, 0x38, 0x62, 0x63, 0x37, 0x31, 0x39, 0x32, 0x32, 0x36, 0x38, 0x33, 0x35, 0x64, 0x30,
		0x30, 0x66, 0x33, 0x31, 0x63, 0x62, 0x30, 0x35, 0x66, 0x63, 0x31, 0x31, 0x61, 0x31, 0x3a, 0x76,
		0x34, 0x3a, 0x4c, 0x54, 0x01, 0x01, 0x31, 0x3a, 0x79, 0x31, 0x3a, 0x72, 0x65,
	}
	err := Decode(data, &r)
	if err != nil {
		t.Fatalf("FATAL: decode inherit: %v", err)
	}
	if r.Transaction != "21011812511b1252f2b65c8b1bc17ccc" {
		t.Fatalf("unexpected value of t: %s", r.Transaction)
	}
	if r.Type != "r" {
		t.Fatalf("unexpected value of y: %s", r.Type)
	}
	id := []byte{
		0xeb, 0xff, 0x36, 0x69,
		0x73, 0x51, 0xff, 0x4a,
		0xec, 0x29, 0xcd, 0xba,
		0xab, 0xf2, 0xfb, 0xe3,
		0x46, 0x7c, 0xc2, 0x67,
	}
	if bytes.Compare(r.Response.ID[:], id) != 0 {
		t.Fatalf("unexpected value of r.id: %s", string(r.Response.ID[:]))
	}
}
